# -*- coding: utf-8 -*-
import time
import requests
import json
import click
import pandas as pd
import numpy as np
from datetime import datetime, timezone

__author__ = "Leon Schnieber"
__version__ = "1.0.1"
__maintainer__ = "Leon Schnieber"
__email__ = "leon@faler.ch"
__status__ = "Development"

@click.group()
def cli():
    pass

@cli.command()
@click.option("--inputFile", help="Line-JSON-File generated by purple.py-script to read data from")
@click.option("--addAnnotations", type=bool, default=True, help="add annotations to grafana. Grafana-Login needs to be placed in a config-file.")
@click.option("--influxBaseUrl", default="https://sensor:wd40@smartpouch.foobar.rocks/influx", help="URL to influx-server endpoint")
@click.option("--influxDatabase", default="master", help="Database-name of influx-server to write in")
@click.option("--influxTableName", default="schnieboard_meas", help="table name inside the influx-database, e.g. for debugging")
@click.option("--influxUploadBatchSize", default=1000, help="batch size for uploads (# of rows in one request)")
@click.option("--grafanaConfigfile", default="config.json", help="path to the config-file containing grafana-config-data")
@click.pass_context
def upload_ljson(ctx, inputfile, addannotations, influxbaseurl, influxdatabase, influxtablename, influxuploadbatchsize, grafanaconfigfile):
    read_filename = inputfile
    f = open(read_filename, "r")
    grafana_string = ""   
    index = 0  
    line_arr = f.readlines()
    first_timestamp = 0
    time_str = 0
    batchct = 0
    for row in line_arr:
        index += 1
        try:
            j_row = json.loads(row.strip())

            if "type" in j_row and j_row["type"] == "meas":
                time_str = float(j_row["time"]) * 1e6
                if first_timestamp == 0:
                    first_timestamp = time_str
                substr = f"xL={j_row['Low']['x']},yL={j_row['Low']['y']},zL={j_row['Low']['z']},"
                substr += f"xH={j_row['High']['x']},yH={j_row['High']['y']},zH={j_row['High']['z']},"
                substr += f"xG={j_row['Gyro']['x']},yG={j_row['Gyro']['y']},zG={j_row['Gyro']['z']},"
                substr += f"aG={j_row['Gyro']['a']},bG={j_row['Gyro']['b']},cG={j_row['Gyro']['c']},"
                
                grafana_string += f"{influxtablename},sensor=pouch01,type=meas {substr.strip(',')} {round(time_str)}\n"
                batchct += 1
                if batchct >= influxuploadbatchsize:
                    r = requests.post(f"{influxbaseurl}/write?db={influxdatabase}&precision=u", grafana_string, timeout=10)
                    if r.status_code >= 200 and r.status_code <= 299:
                        print(f"\ruploading rows {index} / {len(line_arr)}", end="")
                        grafana_string = ""
                        batchct = 0
                    else:
                        print("req fail", r, r.text)

        except json.decoder.JSONDecodeError:
            print("skipped log line: ", row.strip())
            pass
        
            
    # upload the remaining dataset-parts
    r = requests.post(f"{influxbaseurl}/write?db={influxdatabase}&precision=u", grafana_string, timeout=10)
    if r.status_code >= 200 and r.status_code <= 299:
        print(f"\ruploading rows {index} / {len(line_arr)}", end="")
        grafana_string = ""
        batchct = 0
    else:
        print("req fail", r, r.text)

    last_timestamp = time_str
    print("\nUpload complete!                    ")
    if addannotations:
        print("Adding annotationsâ€¦")
        grafana_string = f'{influxtablename}_annotation,sensor=pouch01,type=annotation title="{read_filename}",description="start" {round(first_timestamp)}\n'
        grafana_string += f'{influxtablename}_annotation,sensor=pouch01,type=annotation title="{read_filename}",description="end" {round(last_timestamp)}\n'
        r = requests.post(f"{influxbaseurl}/write?db={influxdatabase}&precision=u", grafana_string, timeout=10)
        if r.status_code >= 200 and r.status_code <= 299:
            print("annotations ok", r.text)
        else:
            print("annotation request fail", r, r.text)

@cli.command()
@click.option("--inputFile", help="Video-Filename used for labeling the upload-data")
@click.option("--startMarkerTime", help="YYYY-DD-MMTHH:MM:SS.ms (ISO-Time) where start marker is aligned to. Please use UTC-Stamps!")
@click.option("--startmarkerframe", type=int, help="frame number in the video with that given timestamp")
@click.option("--endmarkerframe", type=int, help="last frame number in the video to be added")
@click.option("--framerate", default=30, type=float, help="frame rate of the video")
@click.option("--influxBaseUrl", default="https://sensor:wd40@smartpouch.foobar.rocks/influx", help="URL to influx-server endpoint")
@click.option("--influxDatabase", default="master", help="Database-name of influx-server to write in")
@click.option("--influxTableName", default="schnieboard_meas_camera", help="table name inside the influx-database, e.g. for debugging")
def upload_videostamps(inputfile, startmarkertime, startmarkerframe, endmarkerframe, framerate, influxbaseurl, influxdatabase, influxtablename):
    date_format = "%Y-%m-%dT%H:%M:%S.%f"
    dt_object = datetime.strptime(startmarkertime, date_format)
    dt_object = dt_object.replace(tzinfo=timezone.utc)
    startmarkertime_timestamp = dt_object.timestamp()

    video_start_ts = startmarkertime_timestamp - startmarkerframe / framerate
    grafana_lines = ""
    for framenumber in range(startmarkerframe, endmarkerframe):
        ts = round((video_start_ts + framenumber / framerate) * 1e6)
        grafana_lines += f"{influxtablename},camera=camera01,filename={inputfile.strip().replace('/', '_').replace(' ', '_')} framenumber={framenumber} {ts}\n"
    print("data written:", grafana_lines[0:1000])
    r = requests.post(f"{influxbaseurl}/write?db={influxdatabase}&precision=u", grafana_lines, timeout=10)
    if r.status_code >= 200 and r.status_code <= 299:
        print("camera framenumbers ok", r.text)
    else:
        print("camera framenumbers fail", r, r.text)


if __name__ == "__main__":
    cli()
